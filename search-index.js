crystal_doc_search_index_callback({"repository_name":"Spark","body":"# Spark\n\n![Shard CI](https://github.com/stephendolan/spark/workflows/Shard%20CI/badge.svg)\n[![API Documentation Website](https://img.shields.io/website?down_color=red&down_message=Offline&label=API%20Documentation&up_message=Online&url=https%3A%2F%2Fstephendolan.github.io%2Fspark%2F)](https://stephendolan.github.io/spark)\n[![GitHub release](https://img.shields.io/github/release/stephendolan/spark.svg?label=Release)](https://github.com/stephendolan/spark/releases)\n\n## Installation\n\nAdd the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  spark:\n    github: stephendolan/spark\n```\n\nRun `shards install`\n\n## Usage\n\nRequire the shard:\n\n```crystal\nrequire \"spark\"\n```\n\nThen, use any of the fully documented modules below to interact with your user:\n\n- ðŸ’¬ &nbsp; **[Spark::Prompt](https://stephendolan.github.io/spark/Spark/Prompt.html)**\n  - [`#say`](<https://stephendolan.github.io/spark/Spark/Prompt.html#say(message:String=%22%22,**options)-instance-method>) - Display a message to a user\n  - [`#ask`](<https://stephendolan.github.io/spark/Spark/Prompt.html#ask(message:String,**options)-instance-method>) - Get information from a user\n  - [`#yes?`](<https://stephendolan.github.io/spark/Spark/Prompt.html#yes?(message:String,**options)-instance-method>) - Get confirmation from a user, with a default of \"Yes\"\n  - [`#no?`](<https://stephendolan.github.io/spark/Spark/Prompt.html#no?(message:String,**options)-instance-method>) - Get confirmation from a user, with a default of \"No\"\n  - [`#newline`](https://stephendolan.github.io/spark/Spark/Prompt.html#newline-instance-method) - Output a blank line to the user's prompt\n- ðŸ—„ &nbsp; **[Spark::File](https://stephendolan.github.io/spark/Spark/File.html)**\n  - [`.replace_in_file`](<https://stephendolan.github.io/spark/Spark/File.html#replace_in_file(relative_path:String,pattern:Regex%7CString,replacement:String)-instance-method>) - Replace some content in a file\n  - [`.inject_into_file`](<https://stephendolan.github.io/spark/Spark/File.html#inject_into_file(relative_path:String,*content,afterpattern:Regex%7CString)-instance-method>) - Insert content into a file before or after a pattern\n  - [`.prepend_to_file`](<https://stephendolan.github.io/spark/Spark/File.html#prepend_to_file(relative_path:String,*content)-instance-method>) - Insert content at the beginning of a file\n  - [`.append_to_file`](<https://stephendolan.github.io/spark/Spark/File.html#append_to_file(relative_path:String,*content)-instance-method>) - Insert content at the end of a file\n  - [`.copy_file`](<https://stephendolan.github.io/spark/Spark/File.html#copy_file(source_path:String,destination_path:String):String-instance-method>) - Copy a file (very few safeguards in place currently)\n  - [`.move_file`](<https://stephendolan.github.io/spark/Spark/File.html#move_file(source_path:String,destination_path:String):String-instance-method>) - Move a file (very few safeguards in place currently)\n  - [`.create_file`](<https://stephendolan.github.io/spark/Spark/File.html#create_file(relative_path:String,*content):String-instance-method>) - Create a file (very few safeguards in place currently)\n  - [`.remove_file`](<https://stephendolan.github.io/spark/Spark/File.html#remove_file(relative_path:String)-instance-method>) - Remove a file\n- ðŸ’Ž &nbsp; **[Spark::Shard](https://stephendolan.github.io/spark/Spark/Shard.html)**\n  - [`#add_shard`](<https://stephendolan.github.io/spark/Spark/Shard.html#add_shard(name:String,*,development_only:Bool=false,**options)-instance-method>) - Adds a shard to the `shard.yml` file\n\n## Development\n\n1. Add your code\n1. Ensure specs pass with `crystal spec`\n1. Ensure correct formatting with `crystal tool format --check`\n1. Ensure correct style with `./bin/ameba`\n\n## Contributing\n\n1. Fork it (<https://github.com/stephendolan/spark/fork>)\n1. Create your feature branch (`git checkout -b my-new-feature`)\n1. Commit your changes (`git commit -am 'Add some feature'`)\n1. Push to the branch (`git push origin my-new-feature`)\n1. Create a new Pull Request\n\n## Credits & Inspirations\n\n- [TTY](https://github.com/piotrmurach/tty)\n- [Thor](https://github.com/erikhuda/thor)\n\n## Contributors\n\n- [Stephen Dolan](https://github.com/your-github-user) - creator and maintainer\n","program":{"html_id":"Spark/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"Spark","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"Spark/InvalidPathError","path":"InvalidPathError.html","kind":"class","full_name":"InvalidPathError","name":"InvalidPathError","abstract":false,"superclass":{"html_id":"Spark/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"Spark/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"Spark/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/file/invalid_path_error.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/invalid_path_error.cr#L2"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Thrown when a provided file path does not exist.","summary":"<p>Thrown when a provided file path does not exist.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Spark/MissingShardFileError","path":"MissingShardFileError.html","kind":"class","full_name":"MissingShardFileError","name":"MissingShardFileError","abstract":false,"superclass":{"html_id":"Spark/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},"ancestors":[{"html_id":"Spark/ArgumentError","kind":"class","full_name":"ArgumentError","name":"ArgumentError"},{"html_id":"Spark/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/shard/invalid_path_error.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/invalid_path_error.cr#L2"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Thrown when a shard.yml file cannot be found.","summary":"<p>Thrown when a shard.yml file cannot be found.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Spark/Spark","path":"Spark.html","kind":"module","full_name":"Spark","name":"Spark","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/spark.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark.cr#L5"},{"filename":"src/spark/file.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L5"},{"filename":"src/spark/file/create_file.cr","line_number":1,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L1"},{"filename":"src/spark/prompt.cr","line_number":3,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L3"},{"filename":"src/spark/prompt/confirmation_question.cr","line_number":3,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/confirmation_question.cr#L3"},{"filename":"src/spark/prompt/question.cr","line_number":1,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L1"},{"filename":"src/spark/prompt/statement.cr","line_number":1,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L1"},{"filename":"src/spark/shard.cr","line_number":3,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard.cr#L3"},{"filename":"src/spark/shard/shard_content.cr","line_number":1,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L1"},{"filename":"src/spark/shard/shard_file.cr","line_number":1,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L1"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/__w/spark/spark/src\\\"`).chomp.stringify }}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"Spark/Spark","kind":"module","full_name":"Spark","name":"Spark"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"Spark is a CLI Utility library that makes working with users on the\ncommand line simpler than ever.","summary":"<p>Spark is a CLI Utility library that makes working with users on the command line simpler than ever.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"logger:Spark::Prompt-instance-method","html_id":"logger:Spark::Prompt-instance-method","name":"logger","doc":"Which object to use for logging optional output to users.","summary":"<p>Which object to use for logging optional output to users.</p>","abstract":false,"args":[],"args_string":" : Spark::Prompt","args_html":" : <a href=\"Spark/Prompt.html\">Spark::Prompt</a>","location":{"filename":"src/spark.cr","line_number":31,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark.cr#L31"},"def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spark::Prompt","visibility":"Public","body":"if (value = @@logger).nil?\n  @@logger = Spark::Prompt.new\nelse\n  value\nend"}},{"id":"logger=(logger:Spark::Prompt)-instance-method","html_id":"logger=(logger:Spark::Prompt)-instance-method","name":"logger=","doc":"Control which object is used to log optional output to users.\n\nExample:\n```\nSpark.logger = Spark::Prompt.new(input: File.tempfile.open, output: File.tempfile.open)\n```","summary":"<p>Control which object is used to log optional output to users.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Spark::Prompt"}],"args_string":"(logger : Spark::Prompt)","args_html":"(logger : <a href=\"Spark/Prompt.html\">Spark::Prompt</a>)","location":{"filename":"src/spark.cr","line_number":45,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark.cr#L45"},"def":{"name":"logger=","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"Spark::Prompt"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger = logger"}},{"id":"quiet=(quiet)-instance-method","html_id":"quiet=(quiet)-instance-method","name":"quiet=","doc":"Control whether or not optional terminal output is displayed to users.\n\nExample:\n```\nSpark.logger.log_status(\"Testing\") # => This will print something to the user\nSpark.quiet = true\nSpark.logger.log_status(\"Testing\") # => Nothing will print to the user\n```","summary":"<p>Control whether or not optional terminal output is displayed to users.</p>","abstract":false,"args":[{"name":"quiet","doc":null,"default_value":"","external_name":"quiet","restriction":""}],"args_string":"(quiet)","args_html":"(quiet)","location":{"filename":"src/spark.cr","line_number":27,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark.cr#L27"},"def":{"name":"quiet=","args":[{"name":"quiet","doc":null,"default_value":"","external_name":"quiet","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@quiet = quiet"}},{"id":"quiet?-instance-method","html_id":"quiet?-instance-method","name":"quiet?","doc":"Whether or not to suppress optional terminal output to users.","summary":"<p>Whether or not to suppress optional terminal output to users.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark.cr","line_number":11,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark.cr#L11"},"def":{"name":"quiet?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@quiet).nil?\n  @@quiet = false\nelse\n  value\nend"}}],"macros":[],"types":[{"html_id":"Spark/Spark/File","path":"Spark/File.html","kind":"module","full_name":"Spark::File","name":"File","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/spark/file.cr","line_number":7,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L7"},{"filename":"src/spark/file/create_file.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L2"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"BEGINNING_OF_FILE_REGEX","name":"BEGINNING_OF_FILE_REGEX","value":"/\\A/","doc":null,"summary":null},{"id":"END_OF_FILE_REGEX","name":"END_OF_FILE_REGEX","value":"/\\z/","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"Spark/Spark/File","kind":"module","full_name":"Spark::File","name":"File"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark","kind":"module","full_name":"Spark","name":"Spark"},"doc":"Spark::File allows you to interact with the user's filesystem.","summary":"<p>Spark::File allows you to interact with the user's filesystem.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"append_to_file(relative_path:String,*content)-instance-method","html_id":"append_to_file(relative_path:String,*content)-instance-method","name":"append_to_file","doc":"Append any number of strings to the end of a file.\n\nExample:\n```\nSpark::File.append_to_file(\"README.md\", \"# Goodbye!\", \"You're at the bottom of the README.\")\n```","summary":"<p>Append any number of strings to the end of a file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"args_string":"(relative_path : String, *content)","args_html":"(relative_path : String, *content)","location":{"filename":"src/spark/file.cr","line_number":63,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L63"},"def":{"name":"append_to_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"inject_into_file(relative_path, *content, after: END_OF_FILE_REGEX)"}},{"id":"append_to_file(relative_path:String,&:->String)-instance-method","html_id":"append_to_file(relative_path:String,&:->String)-instance-method","name":"append_to_file","doc":"Append the provided block content to the end of a file.\n\nExample:\n```\nSpark::File.append_to_file(\"README.md\") do\n  <<-CONTENT\n  # Goodbye\n\n  You're at the bottom of the README.\n  CONTENT\nend\n```","summary":"<p>Append the provided block content to the end of a file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"args_string":"(relative_path : String, & :  -> String)","args_html":"(relative_path : String, & :  -> String)","location":{"filename":"src/spark/file.cr","line_number":79,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L79"},"def":{"name":"append_to_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(-> String)"},"return_type":"","visibility":"Public","body":"inject_into_file(relative_path, yield, after: END_OF_FILE_REGEX)"}},{"id":"copy_file(source_path:String,destination_path:String):String-instance-method","html_id":"copy_file(source_path:String,destination_path:String):String-instance-method","name":"copy_file","doc":"Copy a file from a provided source path to a provided destination.\n\nExample:\n```\nSpark::File.copy_file(\"README.md\", \"IDENTICAL_README.md\")\n```","summary":"<p>Copy a file from a provided source path to a provided destination.</p>","abstract":false,"args":[{"name":"source_path","doc":null,"default_value":"","external_name":"source_path","restriction":"String"},{"name":"destination_path","doc":null,"default_value":"","external_name":"destination_path","restriction":"String"}],"args_string":"(source_path : String, destination_path : String) : String","args_html":"(source_path : String, destination_path : String) : String","location":{"filename":"src/spark/file.cr","line_number":136,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L136"},"def":{"name":"copy_file","args":[{"name":"source_path","doc":null,"default_value":"","external_name":"source_path","restriction":"String"},{"name":"destination_path","doc":null,"default_value":"","external_name":"destination_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"raise_unless_exists(source_path)\ncreate_file(destination_path, ::File.read(source_path))\n"}},{"id":"create_file(relative_path:String,*content):String-instance-method","html_id":"create_file(relative_path:String,*content):String-instance-method","name":"create_file","doc":"Create a new file with the provided content.\n\nExample:\n```\nSpark::File.create_file(\"README.md\", \"# Welcome\\n\\n\", \"This is my new file.\")\n```","summary":"<p>Create a new file with the provided content.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"args_string":"(relative_path : String, *content) : String","args_html":"(relative_path : String, *content) : String","location":{"filename":"src/spark/file.cr","line_number":89,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L89"},"def":{"name":"create_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"file_content = content.join\n(CreateFile.new(relative_path, file_content)).call\n"}},{"id":"create_file(relative_path:String,&:->String):String-instance-method","html_id":"create_file(relative_path:String,&:->String):String-instance-method","name":"create_file","doc":"Create a new file with the provided block content.\n\nExample:\n```\nSpark::File.create_file(\"README.md\") do\n  <<-CONTENT\n  # Welcome\n\n  This is my new file.\n  CONTENT\nend\n```","summary":"<p>Create a new file with the provided block content.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"args_string":"(relative_path : String, & :  -> String) : String","args_html":"(relative_path : String, & :  -> String) : String","location":{"filename":"src/spark/file.cr","line_number":107,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L107"},"def":{"name":"create_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(-> String)"},"return_type":"String","visibility":"Public","body":"(CreateFile.new(relative_path, yield)).call"}},{"id":"inject_into_file(relative_path:String,*content,afterpattern:Regex|String)-instance-method","html_id":"inject_into_file(relative_path:String,*content,afterpattern:Regex|String)-instance-method","name":"inject_into_file","doc":"Inject any number of strings *after* the provided pattern.\n\nExample:\n```\nSpark::File.inject_into_file(\"README.md\", \"# New Section\", after: \"# Last Section\\n\")\n```","summary":"<p>Inject any number of strings <em>after</em> the provided pattern.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"after","restriction":"Regex | String"}],"args_string":"(relative_path : String, *content, after pattern : Regex | String)","args_html":"(relative_path : String, *content, after pattern : Regex | String)","location":{"filename":"src/spark/file.cr","line_number":166,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L166"},"def":{"name":"inject_into_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"after","restriction":"Regex | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"replacement = \"\\\\0\" + content.join\nreplace_in_file(relative_path, pattern, replacement)\n"}},{"id":"inject_into_file(relative_path:String,*,afterpattern:Regex|String,&:->String)-instance-method","html_id":"inject_into_file(relative_path:String,*,afterpattern:Regex|String,&:->String)-instance-method","name":"inject_into_file","doc":"Inject the provided block content *after* the provided pattern.\n\nExample:\n```\nSpark::File.inject_into_file(\"README.md\", after: \"# Last Section\\n\") do\n  <<-CONTENT\n  This is some new file content.\n  It's going to be great!\\n\n  CONTENT\nend\n```","summary":"<p>Inject the provided block content <em>after</em> the provided pattern.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"after","restriction":"Regex | String"}],"args_string":"(relative_path : String, *, after pattern : Regex | String, & :  -> String)","args_html":"(relative_path : String, *, after pattern : Regex | String, & :  -> String)","location":{"filename":"src/spark/file.cr","line_number":183,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L183"},"def":{"name":"inject_into_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"after","restriction":"Regex | String"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(-> String)"},"return_type":"","visibility":"Public","body":"replacement = \"\\\\0#{yield}\"\nreplace_in_file(relative_path, pattern, replacement)\n"}},{"id":"inject_into_file(relative_path:String,*content,beforepattern:Regex|String)-instance-method","html_id":"inject_into_file(relative_path:String,*content,beforepattern:Regex|String)-instance-method","name":"inject_into_file","doc":"Inject any number of strings *before* the provided pattern.\n\nExample:\n```\nSpark::File.inject_into_file(\"README.md\", \"# New Section\", before: \"# First Section\\n\")\n```","summary":"<p>Inject any number of strings <em>before</em> the provided pattern.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"before","restriction":"Regex | String"}],"args_string":"(relative_path : String, *content, before pattern : Regex | String)","args_html":"(relative_path : String, *content, before pattern : Regex | String)","location":{"filename":"src/spark/file.cr","line_number":195,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L195"},"def":{"name":"inject_into_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"before","restriction":"Regex | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"replacement = content.join + \"\\\\0\"\nreplace_in_file(relative_path, pattern, replacement)\n"}},{"id":"inject_into_file(relative_path:String,*,beforepattern:Regex|String,&:->String)-instance-method","html_id":"inject_into_file(relative_path:String,*,beforepattern:Regex|String,&:->String)-instance-method","name":"inject_into_file","doc":"Inject the provided block content *before* the provided pattern.\n\nExample:\n```\nSpark::File.inject_into_file(\"README.md\", before: \"# First Section\\n\") do\n  <<-CONTENT\n  This is some new file content.\n  It's going to be great!\\n\n  CONTENT\nend\n```","summary":"<p>Inject the provided block content <em>before</em> the provided pattern.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"before","restriction":"Regex | String"}],"args_string":"(relative_path : String, *, before pattern : Regex | String, & :  -> String)","args_html":"(relative_path : String, *, before pattern : Regex | String, & :  -> String)","location":{"filename":"src/spark/file.cr","line_number":212,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L212"},"def":{"name":"inject_into_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pattern","doc":null,"default_value":"","external_name":"before","restriction":"Regex | String"}],"double_splat":null,"splat_index":1,"yields":0,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(-> String)"},"return_type":"","visibility":"Public","body":"replacement = \"#{yield}\\\\0\"\nreplace_in_file(relative_path, pattern, replacement)\n"}},{"id":"move_file(source_path:String,destination_path:String):String-instance-method","html_id":"move_file(source_path:String,destination_path:String):String-instance-method","name":"move_file","doc":"Move a file from the provided source path to the provided destination.\n\nNote that the source file will no longer exist after this action.\nIf you wish to preserve the source file, use `Spark::File.copy_file`.\n\nExample:\n```\nSpark::File.move_file(\"README.md\", \"NEW_README.md\")\n```","summary":"<p>Move a file from the provided source path to the provided destination.</p>","abstract":false,"args":[{"name":"source_path","doc":null,"default_value":"","external_name":"source_path","restriction":"String"},{"name":"destination_path","doc":null,"default_value":"","external_name":"destination_path","restriction":"String"}],"args_string":"(source_path : String, destination_path : String) : String","args_html":"(source_path : String, destination_path : String) : String","location":{"filename":"src/spark/file.cr","line_number":151,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L151"},"def":{"name":"move_file","args":[{"name":"source_path","doc":null,"default_value":"","external_name":"source_path","restriction":"String"},{"name":"destination_path","doc":null,"default_value":"","external_name":"destination_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"raise_unless_exists(source_path)\nnew_file_path = copy_file(source_path, destination_path)\nremove_file(source_path)\nnew_file_path\n"}},{"id":"prepend_to_file(relative_path:String,*content)-instance-method","html_id":"prepend_to_file(relative_path:String,*content)-instance-method","name":"prepend_to_file","doc":"Prepend any number of strings to the beginning of a file.\n\nExample:\n```\nSpark::File.prepend_to_file(\"README.md\", \"# Welcome!\", \"You're at the top of the README.\")\n```","summary":"<p>Prepend any number of strings to the beginning of a file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"args_string":"(relative_path : String, *content)","args_html":"(relative_path : String, *content)","location":{"filename":"src/spark/file.cr","line_number":37,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L37"},"def":{"name":"prepend_to_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"inject_into_file(relative_path, *content, before: BEGINNING_OF_FILE_REGEX)"}},{"id":"prepend_to_file(relative_path:String,&:->String)-instance-method","html_id":"prepend_to_file(relative_path:String,&:->String)-instance-method","name":"prepend_to_file","doc":"Prepend the provided block content to the beginning of a file.\n\nExample:\n```\nSpark::File.prepend_to_file(\"README.md\") do\n  <<-CONTENT\n  # Welcome\n\n  You're at the top of the README.\n  CONTENT\nend\n```","summary":"<p>Prepend the provided block content to the beginning of a file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"args_string":"(relative_path : String, & :  -> String)","args_html":"(relative_path : String, & :  -> String)","location":{"filename":"src/spark/file.cr","line_number":53,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L53"},"def":{"name":"prepend_to_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(-> String)"},"return_type":"","visibility":"Public","body":"inject_into_file(relative_path, yield, before: BEGINNING_OF_FILE_REGEX)"}},{"id":"remove_file(relative_path:String)-instance-method","html_id":"remove_file(relative_path:String)-instance-method","name":"remove_file","doc":"Remove a file.\n\nRemoving a single file:\n```\nSpark::File.remove_file(\"README.md\")\n```\n\nRemoving a directory:\n```\nSpark::File.remove_file(\"src/\")\n```","summary":"<p>Remove a file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"args_string":"(relative_path : String)","args_html":"(relative_path : String)","location":{"filename":"src/spark/file.cr","line_number":122,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L122"},"def":{"name":"remove_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Spark.logger.log_action(\"REMOVING\", relative_path, color: :red)\nif ::File.exists?(relative_path)\nelse\n  return\nend\n::FileUtils.rm_r(relative_path)\n"}},{"id":"replace_in_file(relative_path:String,pattern:Regex|String,replacement:String)-instance-method","html_id":"replace_in_file(relative_path:String,pattern:Regex|String,replacement:String)-instance-method","name":"replace_in_file","doc":"Replace a specific pattern with some replacement text throughout a given file.\n\nExample:\n```\nSpark::File.replace_in_file(\"shard.yml\", pattern: \"MIT\", replacement: \"Apache\")\n```","summary":"<p>Replace a specific pattern with some replacement text throughout a given file.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex | String"},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":"String"}],"args_string":"(relative_path : String, pattern : Regex | String, replacement : String)","args_html":"(relative_path : String, pattern : Regex | String, replacement : String)","location":{"filename":"src/spark/file.cr","line_number":19,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file.cr#L19"},"def":{"name":"replace_in_file","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":"Regex | String"},{"name":"replacement","doc":null,"default_value":"","external_name":"replacement","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise_unless_exists(relative_path)\nSpark.logger.log_action(\"REPLACING CONTENT\", \"#{relative_path} - '#{pattern.inspect}' for '#{replacement}'\", color: :yellow)\npattern = process_pattern(pattern)\nexisting_file_content = ::File.read(relative_path)\nnew_file_content = existing_file_content.gsub(pattern, replacement)\n::File.write(relative_path, new_file_content)\n"}}],"macros":[],"types":[{"html_id":"Spark/Spark/File/CreateFile","path":"Spark/File/CreateFile.html","kind":"class","full_name":"Spark::File::CreateFile","name":"CreateFile","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/file/create_file.cr","line_number":4,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L4"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark/File","kind":"module","full_name":"Spark::File","name":"File"},"doc":"CreateFile acts as a convenient wrapper to perform file creation.","summary":"<p>CreateFile acts as a convenient wrapper to perform file creation.</p>","class_methods":[],"constructors":[{"id":"new(relative_path:String,content:String)-class-method","html_id":"new(relative_path:String,content:String)-class-method","name":"new","doc":"Set up a new CreateFile object for creation.","summary":"<p>Set up a new CreateFile object for creation.</p>","abstract":false,"args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String"}],"args_string":"(relative_path : String, content : String)","args_html":"(relative_path : String, content : String)","location":{"filename":"src/spark/file/create_file.cr","line_number":9,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L9"},"def":{"name":"new","args":[{"name":"relative_path","doc":null,"default_value":"","external_name":"relative_path","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(relative_path, content)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":"Create the initialized `CreateFile` object.","summary":"<p>Create the initialized <code><a href=\"../../Spark/File/CreateFile.html\">CreateFile</a></code> object.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/file/create_file.cr","line_number":13,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L13"},"def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Spark.logger.log_action(\"CREATING\", \"#{relative_path}\", color: :green)\nDir.mkdir_p(::File.dirname(relative_path))\n::File.write(relative_path, content)\nrelative_path\n"}},{"id":"content:String-instance-method","html_id":"content:String-instance-method","name":"content","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/spark/file/create_file.cr","line_number":6,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L6"},"def":{"name":"content","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@content"}},{"id":"relative_path:String-instance-method","html_id":"relative_path:String-instance-method","name":"relative_path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/spark/file/create_file.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/file/create_file.cr#L5"},"def":{"name":"relative_path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@relative_path"}}],"macros":[],"types":[]}]},{"html_id":"Spark/Spark/Prompt","path":"Spark/Prompt.html","kind":"class","full_name":"Spark::Prompt","name":"Prompt","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/prompt.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L5"},{"filename":"src/spark/prompt/confirmation_question.cr","line_number":4,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/confirmation_question.cr#L4"},{"filename":"src/spark/prompt/question.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L2"},{"filename":"src/spark/prompt/statement.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L2"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark","kind":"module","full_name":"Spark","name":"Spark"},"doc":"Spark::Prompt allows you to interact with users to gather input or display messages","summary":"<p>Spark::Prompt allows you to interact with users to gather input or display messages</p>","class_methods":[],"constructors":[{"id":"new(input:IO::FileDescriptor=STDIN,output:IO::FileDescriptor=STDOUT)-class-method","html_id":"new(input:IO::FileDescriptor=STDIN,output:IO::FileDescriptor=STDOUT)-class-method","name":"new","doc":"Initialize a new Spark::Prompt","summary":"<p>Initialize a new Spark::Prompt</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"STDIN","external_name":"input","restriction":"IO::FileDescriptor"},{"name":"output","doc":null,"default_value":"STDOUT","external_name":"output","restriction":"IO::FileDescriptor"}],"args_string":"(input : IO::FileDescriptor = <span class=\"t\">STDIN</span>, output : IO::FileDescriptor = <span class=\"t\">STDOUT</span>)","args_html":"(input : IO::FileDescriptor = <span class=\"t\">STDIN</span>, output : IO::FileDescriptor = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/spark/prompt.cr","line_number":19,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L19"},"def":{"name":"new","args":[{"name":"input","doc":null,"default_value":"STDIN","external_name":"input","restriction":"IO::FileDescriptor"},{"name":"output","doc":null,"default_value":"STDOUT","external_name":"output","restriction":"IO::FileDescriptor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(input, output)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"ask(message:String,**options):String-instance-method","html_id":"ask(message:String,**options):String-instance-method","name":"ask","doc":"Ask the user a question.\n\nExample:\n```\nprompt = Spark::Prompt.new\nprompt.ask(\"What is your name?\") # => \"What is your name?\"\n```","summary":"<p>Ask the user a question.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String, **options) : String","args_html":"(message : String, **options) : String","location":{"filename":"src/spark/prompt.cr","line_number":67,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L67"},"def":{"name":"ask","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if message.blank?\n  return \"\"\nend\nquestion = Question.new(self, **options)\n(question.call(message)).to_s\n"}},{"id":"ask(message:String,**options,&block:Spark::Prompt::Question->_):String-instance-method","html_id":"ask(message:String,**options,&block:Spark::Prompt::Question->_):String-instance-method","name":"ask","doc":"Ask the user a question with optional validation.\n\nExample with validation:\n```\nprompt = Spark::Prompt.new\nprompt.ask(\"What is your name?\") do |question|\n  question.validate(/LuckyCasts/, error_message: \"Name must be 'LuckyCasts'\")\nend\n# => \"What is your name?\"\n```","summary":"<p>Ask the user a question with optional validation.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String, **options, &block : Spark::Prompt::Question -> _) : String","args_html":"(message : String, **options, &block : <a href=\"../Spark/Prompt/Question.html\">Spark::Prompt::Question</a> -> _) : String","location":{"filename":"src/spark/prompt.cr","line_number":84,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L84"},"def":{"name":"ask","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Spark::Prompt::Question -> _)"},"return_type":"String","visibility":"Public","body":"if message.blank?\n  return \"\"\nend\nquestion = Question.new(self, **options)\n(question.call(message, &block)).to_s\n"}},{"id":"decorate(string:String,color:Symbol?=nil,style:Symbol?=nil)-instance-method","html_id":"decorate(string:String,color:Symbol?=nil,style:Symbol?=nil)-instance-method","name":"decorate","doc":"Color and stylize a given string.\n\nExample:\n```\nprompt = Spark::Prompt.new\nprompt.decorate(\"This is an example\", color: :green, style: :bold) # => \"\\e[32;1mHello, there!\\e[0m\\n\"\n```","summary":"<p>Color and stylize a given string.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"}],"args_string":"(string : String, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>)","args_html":"(string : String, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>)","location":{"filename":"src/spark/prompt.cr","line_number":136,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L136"},"def":{"name":"decorate","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string = case color\nin Symbol\n  string.colorize(color)\nin Nil\n  string.colorize(:default)\nend\ncase style\nin Symbol\n  string.mode(style)\nin Nil\n  string\nend\n"}},{"id":"newline-instance-method","html_id":"newline-instance-method","name":"newline","doc":"Output an empty line to the user's prompt.\n\nExample:\n```\nprompt = Spark::Prompt.new\nprompt.say(\"This is an example\") # => \"This is an example\\n\"\nprompt.newline                   # => \"\\n\"\n```","summary":"<p>Output an empty line to the user's prompt.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/prompt.cr","line_number":56,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L56"},"def":{"name":"newline","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(Statement.new(self)).call(\"\")"}},{"id":"no?(message:String,**options):Bool-instance-method","html_id":"no?(message:String,**options):Bool-instance-method","name":"no?","doc":"Ask the user a yes/no question, where the default is \"No\".\n\nExample:\n```\nprompt = Spark::Prompt.new\nif prompt.no? \"Are you feeling happy today?\"\n  prompt.say \"I'm sorry to hear that.\"\nelse\n  prompt.say \"Then it's going to be a great day!\"\nend\n```","summary":"<p>Ask the user a yes/no question, where the default is \"No\".</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String, **options) : Bool","args_html":"(message : String, **options) : Bool","location":{"filename":"src/spark/prompt.cr","line_number":121,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L121"},"def":{"name":"no?","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if message.blank?\n  return false\nend\noptions_with_default = options.merge(default: false)\nquestion = ConfirmationQuestion.new(self, **options_with_default)\nquestion.call(message)\n"}},{"id":"say(message:String=&quot;&quot;,**options)-instance-method","html_id":"say(message:String=&quot;&quot;,**options)-instance-method","name":"say","doc":"Output some text to a user, with an optional color and style.\n\nPlain example:\n```\nprompt = Spark::Prompt.new\nprompt.say(\"This is an example\") # => \"This is an example\\n\"\n```\n\nWithout a newline:\n```\nprompt = Spark::Prompt.new\nprompt.say(\"This is an example\", newline: false) # => \"This is an example\"\n```\n\nWith color and style (see Spark::Prompt#decorate):\n```\nprompt = Spark::Prompt.new\nprompt.say(\"This is an example\", color: :green, style: :bold) # => \"\\e[32;1mHello, there!\\e[0m\\n\"\n```","summary":"<p>Output some text to a user, with an optional color and style.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"\"\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = <span class=\"s\">&quot;&quot;</span>, **options)","args_html":"(message : String = <span class=\"s\">&quot;&quot;</span>, **options)","location":{"filename":"src/spark/prompt.cr","line_number":41,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L41"},"def":{"name":"say","args":[{"name":"message","doc":null,"default_value":"\"\"","external_name":"message","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if message.blank?\n  return\nend\nstatement = Statement.new(self, **options)\nstatement.call(message)\n"}},{"id":"yes?(message:String,**options):Bool-instance-method","html_id":"yes?(message:String,**options):Bool-instance-method","name":"yes?","doc":"Ask the user a yes/no question, where the default is \"Yes\".\n\nExample:\n```\nprompt = Spark::Prompt.new\nif prompt.yes? \"Did you tell me the truth?\"\n  prompt.say \"Great! Thank you, #{user_name}.\", color: :green\nelse\n  prompt.say \"Shame on you!\"\nend\n```","summary":"<p>Ask the user a yes/no question, where the default is \"Yes\".</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String, **options) : Bool","args_html":"(message : String, **options) : Bool","location":{"filename":"src/spark/prompt.cr","line_number":102,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt.cr#L102"},"def":{"name":"yes?","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if message.blank?\n  return false\nend\noptions_with_default = options.merge(default: true)\nquestion = ConfirmationQuestion.new(self, **options_with_default)\nquestion.call(message)\n"}}],"macros":[],"types":[{"html_id":"Spark/Spark/Prompt/ConfirmationQuestion","path":"Spark/Prompt/ConfirmationQuestion.html","kind":"class","full_name":"Spark::Prompt::ConfirmationQuestion","name":"ConfirmationQuestion","abstract":false,"superclass":{"html_id":"Spark/Spark/Prompt/Question","kind":"class","full_name":"Spark::Prompt::Question","name":"Question"},"ancestors":[{"html_id":"Spark/Spark/Prompt/Question","kind":"class","full_name":"Spark::Prompt::Question","name":"Question"},{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/prompt/confirmation_question.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/confirmation_question.cr#L5"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark/Prompt","kind":"class","full_name":"Spark::Prompt","name":"Prompt"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"Spark/Spark/Prompt/Question","path":"Spark/Prompt/Question.html","kind":"class","full_name":"Spark::Prompt::Question","name":"Question","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/prompt/question.cr","line_number":4,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L4"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"Spark/Spark/Prompt/ConfirmationQuestion","kind":"class","full_name":"Spark::Prompt::ConfirmationQuestion","name":"ConfirmationQuestion"}],"including_types":[],"namespace":{"html_id":"Spark/Spark/Prompt","kind":"class","full_name":"Spark::Prompt","name":"Prompt"},"doc":"A Question is used to gather user input.","summary":"<p>A Question is used to gather user input.</p>","class_methods":[],"constructors":[{"id":"new(prompt:Spark::Prompt,color:Symbol?=nil,style:Symbol?=nil,default:Bool?|String?=nil,**options)-class-method","html_id":"new(prompt:Spark::Prompt,color:Symbol?=nil,style:Symbol?=nil,default:Bool?|String?=nil,**options)-class-method","name":"new","doc":"Creates a new Question.","summary":"<p>Creates a new Question.</p>","abstract":false,"args":[{"name":"prompt","doc":null,"default_value":"","external_name":"prompt","restriction":"Spark::Prompt"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"},{"name":"default","doc":null,"default_value":"nil","external_name":"default","restriction":"Bool | ::Nil | String | ::Nil"}],"args_string":"(prompt : Spark::Prompt, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>, default : Bool? | String? = <span class=\"n\">nil</span>, **options)","args_html":"(prompt : <a href=\"../../Spark/Prompt.html\">Spark::Prompt</a>, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>, default : Bool? | String? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/spark/prompt/question.cr","line_number":40,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L40"},"def":{"name":"new","args":[{"name":"prompt","doc":null,"default_value":"","external_name":"prompt","restriction":"Spark::Prompt"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"},{"name":"default","doc":null,"default_value":"nil","external_name":"default","restriction":"Bool | ::Nil | String | ::Nil"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prompt, color, style, default, **options)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(message:String)-instance-method","html_id":"call(message:String)-instance-method","name":"call","doc":"Ask the question to the user.\n\nThis handles adding the default text, a space before user input, and decoration.\n\nIt also gathers user input.","summary":"<p>Ask the question to the user.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/spark/prompt/question.cr","line_number":54,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L54"},"def":{"name":"call","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"message = add_default_to_message(message)\nmessage = message + \" \"\nmessage = @prompt.decorate(message, color, style)\n@prompt.print(message)\ninput = @prompt.gets\nprocess_input(input)\n"}},{"id":"call(message:String,&)-instance-method","html_id":"call(message:String,&)-instance-method","name":"call","doc":"Ask the question to the user, including a block with additional settings.\n\nWe optionally allow the ability to re-collect invalid input.\n\nIf `@retry_on_validation_failure` is `true` (set via `#validate`), we collect input until it is valid.\nIf `@retry_on_validation_failure` is `false` (set via `#validate`), we collect input once and return `nil` if it is invalid.","summary":"<p>Ask the question to the user, including a block with additional settings.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String, &)","args_html":"(message : String, &)","location":{"filename":"src/spark/prompt/question.cr","line_number":71,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L71"},"def":{"name":"call","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"message = add_default_to_message(message)\nmessage = message + \" \"\nmessage = @prompt.decorate(message, color, style)\nyield self\ninput = collect_input_for(message)\nwhile !(valid_input?(input))\n  print_validation_error_message\n  if @retry_on_validation_failure\n    input = collect_input_for(message)\n  else\n    input = nil\n    break\n  end\nend\nprocess_input(input)\n"}},{"id":"color:Symbol?-instance-method","html_id":"color:Symbol?-instance-method","name":"color","doc":"Which color to use to colorize the Question output.\n\nSee https://crystal-lang.org/api/latest/Colorize.html\n\nExample:\n```\n:default\n:black\n:red\n:green\n:yellow\n:blue\n```","summary":"<p>Which color to use to colorize the Question output.</p>","abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/spark/prompt/question.cr","line_number":18,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L18"},"def":{"name":"color","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@color"}},{"id":"default:Bool|String|Nil-instance-method","html_id":"default:Bool|String|Nil-instance-method","name":"default","doc":"Which default value to use for a blank/empty response to the Question.","summary":"<p>Which default value to use for a blank/empty response to the Question.</p>","abstract":false,"args":[],"args_string":" : Bool | String | Nil","args_html":" : Bool | String | Nil","location":{"filename":"src/spark/prompt/question.cr","line_number":37,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L37"},"def":{"name":"default","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@default"}},{"id":"style:Symbol?-instance-method","html_id":"style:Symbol?-instance-method","name":"style","doc":"Which mode to use to stylize the Question output.\n\nSee https://crystal-lang.org/api/latest/Colorize.html\n\nExample:\n```\n:bold\n:bright\n:dim\n:underline\n:blink\n:reverse\n:hidden\n```","summary":"<p>Which mode to use to stylize the Question output.</p>","abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/spark/prompt/question.cr","line_number":34,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L34"},"def":{"name":"style","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@style"}},{"id":"validate(validation:Regex,error_message:String?=nil,*,retry_on_failure:Bool=false)-instance-method","html_id":"validate(validation:Regex,error_message:String?=nil,*,retry_on_failure:Bool=false)-instance-method","name":"validate","doc":"Provide validation for a `Spark::Prompt::Question`, optionally overriding the default error message.\n\nExample with the default message:\n```\nQuestion.new(Spark::Prompt.new).call(\"What is your name\") do |question|\n  question.validate(/LuckyCasts/)\nend\n# => \"What is your name?\"\n```\n\nExample with a custom message:\n```\nQuestion.new(Spark::Prompt.new).call(\"What is your name\") do |question|\n  question.validate(/LuckyCasts/, \"Your name must be 'LuckyCasts'\")\nend\n# => \"What is your name?\"\n```\n\nExample that retries on validation failure:\n```\nQuestion.new(Spark::Prompt.new).call(\"What is your name\") do |question|\n  question.validate(/LuckyCasts/, \"Your name must be 'LuckyCasts'. Please enter a valid value.\", retry_on_failure: true)\nend\n# => \"What is your name?\"\n```","summary":"<p>Provide validation for a <code><a href=\"../../Spark/Prompt/Question.html\">Spark::Prompt::Question</a></code>, optionally overriding the default error message.</p>","abstract":false,"args":[{"name":"validation","doc":null,"default_value":"","external_name":"validation","restriction":"Regex"},{"name":"error_message","doc":null,"default_value":"nil","external_name":"error_message","restriction":"String | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"retry_on_failure","doc":null,"default_value":"false","external_name":"retry_on_failure","restriction":"Bool"}],"args_string":"(validation : Regex, error_message : String? = <span class=\"n\">nil</span>, *, retry_on_failure : Bool = <span class=\"n\">false</span>)","args_html":"(validation : Regex, error_message : String? = <span class=\"n\">nil</span>, *, retry_on_failure : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/spark/prompt/question.cr","line_number":119,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/question.cr#L119"},"def":{"name":"validate","args":[{"name":"validation","doc":null,"default_value":"","external_name":"validation","restriction":"Regex"},{"name":"error_message","doc":null,"default_value":"nil","external_name":"error_message","restriction":"String | ::Nil"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"retry_on_failure","doc":null,"default_value":"false","external_name":"retry_on_failure","restriction":"Bool"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@validation = validation\n@retry_on_validation_failure = retry_on_failure\nif (message = error_message)\n  @validation_error_message = message\nelse\n  @validation_error_message = \"Your answer does not match '#{validation.inspect}'\"\nend\n"}}],"macros":[],"types":[]},{"html_id":"Spark/Spark/Prompt/Statement","path":"Spark/Prompt/Statement.html","kind":"class","full_name":"Spark::Prompt::Statement","name":"Statement","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/prompt/statement.cr","line_number":4,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L4"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark/Prompt","kind":"class","full_name":"Spark::Prompt","name":"Prompt"},"doc":"Represents a statement output to the user's prompt.","summary":"<p>Represents a statement output to the user's prompt.</p>","class_methods":[],"constructors":[{"id":"new(prompt:Spark::Prompt,newline:Bool=true,color:Symbol?=nil,style:Symbol?=nil)-class-method","html_id":"new(prompt:Spark::Prompt,newline:Bool=true,color:Symbol?=nil,style:Symbol?=nil)-class-method","name":"new","doc":"Create a new Statement that can be rendered as output to the user's prompt.","summary":"<p>Create a new Statement that can be rendered as output to the user's prompt.</p>","abstract":false,"args":[{"name":"prompt","doc":null,"default_value":"","external_name":"prompt","restriction":"Spark::Prompt"},{"name":"newline","doc":null,"default_value":"true","external_name":"newline","restriction":"Bool"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"}],"args_string":"(prompt : Spark::Prompt, newline : Bool = <span class=\"n\">true</span>, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>)","args_html":"(prompt : <a href=\"../../Spark/Prompt.html\">Spark::Prompt</a>, newline : Bool = <span class=\"n\">true</span>, color : Symbol? = <span class=\"n\">nil</span>, style : Symbol? = <span class=\"n\">nil</span>)","location":{"filename":"src/spark/prompt/statement.cr","line_number":10,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L10"},"def":{"name":"new","args":[{"name":"prompt","doc":null,"default_value":"","external_name":"prompt","restriction":"Spark::Prompt"},{"name":"newline","doc":null,"default_value":"true","external_name":"newline","restriction":"Bool"},{"name":"color","doc":null,"default_value":"nil","external_name":"color","restriction":"Symbol | ::Nil"},{"name":"style","doc":null,"default_value":"nil","external_name":"style","restriction":"Symbol | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(prompt, newline, color, style)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(message:String)-instance-method","html_id":"call(message:String)-instance-method","name":"call","doc":"Output the Statement message to the prompt","summary":"<p>Output the Statement message to the prompt</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/spark/prompt/statement.cr","line_number":19,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L19"},"def":{"name":"call","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"message = @prompt.decorate(message, color, style)\nif newline?\n  @prompt.puts(message)\nelse\n  @prompt.print(message)\nend\n"}},{"id":"color:Symbol?-instance-method","html_id":"color:Symbol?-instance-method","name":"color","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/spark/prompt/statement.cr","line_number":6,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L6"},"def":{"name":"color","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@color"}},{"id":"newline?:Bool-instance-method","html_id":"newline?:Bool-instance-method","name":"newline?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/spark/prompt/statement.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L5"},"def":{"name":"newline?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@newline"}},{"id":"style:Symbol?-instance-method","html_id":"style:Symbol?-instance-method","name":"style","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/spark/prompt/statement.cr","line_number":7,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/prompt/statement.cr#L7"},"def":{"name":"style","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@style"}}],"macros":[],"types":[]}]},{"html_id":"Spark/Spark/Shard","path":"Spark/Shard.html","kind":"module","full_name":"Spark::Shard","name":"Shard","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/spark/shard.cr","line_number":4,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard.cr#L4"},{"filename":"src/spark/shard/shard_content.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L2"},{"filename":"src/spark/shard/shard_file.cr","line_number":2,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L2"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"Spark/Spark/Shard","kind":"module","full_name":"Spark::Shard","name":"Shard"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark","kind":"module","full_name":"Spark","name":"Spark"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"add_shard(name:String,*,development_only:Bool=false,**options)-instance-method","html_id":"add_shard(name:String,*,development_only:Bool=false,**options)-instance-method","name":"add_shard","doc":"Adds a shard to the project's `shard.yml`.\n\nExample with a GitHub production dependency:\n```\nSpark::Shard.add_shard(\"spark\", github: \"stephendolan/spark\", branch: \"main\")\n```\n\nExample with a GitHub development dependency:\n```\nSpark::Shard.add_shard(\"spark\", github: \"stephendolan/spark\", version: \"~> 1.0\", development_only: true)\n```\n\nExample with a git dependency:\n```\nSpark::Shard.add_shard(\"spark\", git: \"https://mycustomserver.com/stephendolan/spark\", version: \"~> 1.0\", development_only: true)\n```","summary":"<p>Adds a shard to the project's <code>shard.yml</code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"development_only","doc":null,"default_value":"false","external_name":"development_only","restriction":"Bool"}],"args_string":"(name : String, *, development_only : Bool = <span class=\"n\">false</span>, **options)","args_html":"(name : String, *, development_only : Bool = <span class=\"n\">false</span>, **options)","location":{"filename":"src/spark/shard.cr","line_number":36,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard.cr#L36"},"def":{"name":"add_shard","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"development_only","doc":null,"default_value":"false","external_name":"development_only","restriction":"Bool"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"shard_file = ShardFile.new(shard_file_path)\nSpark.logger.log_action(\"ADD SHARD\", name, color: :green)\nif shard_file.contains_shard?(name)\n  return\nend\nshard_content = (ShardContent.new(name, **options)).to_s\nif development_only\n  add_development_shard(shard_file, shard_content)\nelse\n  add_production_shard(shard_file, shard_content)\nend\n"}},{"id":"shard_file_path-instance-method","html_id":"shard_file_path-instance-method","name":"shard_file_path","doc":"Which path to search to find the Crystal shard definition.","summary":"<p>Which path to search to find the Crystal shard definition.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/shard.cr","line_number":8,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard.cr#L8"},"def":{"name":"shard_file_path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@shard_file_path).nil?\n  @@shard_file_path = \"shard.yml\"\nelse\n  value\nend"}},{"id":"shard_file_path=(shard_file_path)-instance-method","html_id":"shard_file_path=(shard_file_path)-instance-method","name":"shard_file_path=","doc":"Control which path to search to find the Crystal shard definition.","summary":"<p>Control which path to search to find the Crystal shard definition.</p>","abstract":false,"args":[{"name":"shard_file_path","doc":null,"default_value":"","external_name":"shard_file_path","restriction":""}],"args_string":"(shard_file_path)","args_html":"(shard_file_path)","location":{"filename":"src/spark/shard.cr","line_number":17,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard.cr#L17"},"def":{"name":"shard_file_path=","args":[{"name":"shard_file_path","doc":null,"default_value":"","external_name":"shard_file_path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@shard_file_path = shard_file_path"}}],"macros":[],"types":[{"html_id":"Spark/Spark/Shard/ShardContent","path":"Spark/Shard/ShardContent.html","kind":"class","full_name":"Spark::Shard::ShardContent","name":"ShardContent","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/shard/shard_content.cr","line_number":3,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L3"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark/Shard","kind":"module","full_name":"Spark::Shard","name":"Shard"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(name:String,github:String?=nil,git:String?=nil,version:String?=nil,branch:String?=nil)-class-method","html_id":"new(name:String,github:String?=nil,git:String?=nil,version:String?=nil,branch:String?=nil)-class-method","name":"new","doc":"Given some basic shard information, provides an object that can be written to `shard.yml` with `#to_s`.","summary":"<p>Given some basic shard information, provides an object that can be written to <code>shard.yml</code> with <code><a href=\"../../Spark/Shard/ShardContent.html#to_s-instance-method\">#to_s</a></code>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"github","doc":null,"default_value":"nil","external_name":"github","restriction":"String | ::Nil"},{"name":"git","doc":null,"default_value":"nil","external_name":"git","restriction":"String | ::Nil"},{"name":"version","doc":null,"default_value":"nil","external_name":"version","restriction":"String | ::Nil"},{"name":"branch","doc":null,"default_value":"nil","external_name":"branch","restriction":"String | ::Nil"}],"args_string":"(name : String, github : String? = <span class=\"n\">nil</span>, git : String? = <span class=\"n\">nil</span>, version : String? = <span class=\"n\">nil</span>, branch : String? = <span class=\"n\">nil</span>)","args_html":"(name : String, github : String? = <span class=\"n\">nil</span>, git : String? = <span class=\"n\">nil</span>, version : String? = <span class=\"n\">nil</span>, branch : String? = <span class=\"n\">nil</span>)","location":{"filename":"src/spark/shard/shard_content.cr","line_number":42,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L42"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"github","doc":null,"default_value":"nil","external_name":"github","restriction":"String | ::Nil"},{"name":"git","doc":null,"default_value":"nil","external_name":"git","restriction":"String | ::Nil"},{"name":"version","doc":null,"default_value":"nil","external_name":"version","restriction":"String | ::Nil"},{"name":"branch","doc":null,"default_value":"nil","external_name":"branch","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, github, git, version, branch)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"branch:String?-instance-method","html_id":"branch:String?-instance-method","name":"branch","doc":"The branch of the shard to use.\nEither `#version` or `#branch` may be optionally provided, but not both.\n\nExample:\n```\nmain\n```","summary":"<p>The branch of the shard to use.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/spark/shard/shard_content.cr","line_number":39,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L39"},"def":{"name":"branch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@branch"}},{"id":"git:String?-instance-method","html_id":"git:String?-instance-method","name":"git","doc":"The git URL of the shard.\n\nExample:\n```\nhttps://mycustomserver.com/stephendolan/spark\n```","summary":"<p>The git URL of the shard.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/spark/shard/shard_content.cr","line_number":21,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L21"},"def":{"name":"git","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@git"}},{"id":"github:String?-instance-method","html_id":"github:String?-instance-method","name":"github","doc":"The GitHub spath of the shard.\n\nExample:\n```\nstephendolan/spark\n```","summary":"<p>The GitHub spath of the shard.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/spark/shard/shard_content.cr","line_number":13,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L13"},"def":{"name":"github","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@github"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":"The name of the shard","summary":"<p>The name of the shard</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/spark/shard/shard_content.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L5"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name"}},{"id":"source-instance-method","html_id":"source-instance-method","name":"source","doc":"Intelligently determine whether to use the GitHub or git source for a shard.\n\nOutputs a `shard.yml`-friendly version of the source.\n\nExample:\n```\nSpark::Shard::ShardContent.new(name: \"test\", github: \"stephendolan/spark\").source                         # => \"github: stephendolan/spark\"\nSpark::Shard::ShardContent.new(name: \"test\", git: \"https://custom-git.com/stephendolan/spark.git\").source # => \"git: https://custom-git.com/stephendolan/spark.git\"\n```","summary":"<p>Intelligently determine whether to use the GitHub or git source for a shard.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/shard/shard_content.cr","line_number":54,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L54"},"def":{"name":"source","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if github.nil? && git.nil?\n  raise(ArgumentError.new(\"Must provide either `git` or `github` for shard content.\"))\nend\nif github && git\n  raise(ArgumentError.new(\"Cannot provide both `git` and `github` for shard content.\"))\nend\nif github\n  \"github: #{github}\"\nelse\n  \"git: #{git}\"\nend\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Outputs a `shard.yml`-friendly representation of the given shard content.\n\nEvery shard should be nested under a header section, so we always indent with two spaces.\n\nExample:\n```\nshard_content = Spark::Shard::ShardContent.new(name: \"spark\", github: \"stephendolan/spark\", version: \"~> 1.0.3\")\nshard_content.to_s # => <<-CONTENT\n  spark:\n    github: stephendolan/spark\n    version: ~> 1.0.3\nCONTENT\n```","summary":"<p>Outputs a <code>shard.yml</code>-friendly representation of the given shard content.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/shard/shard_content.cr","line_number":107,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L107"},"def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"output = \"  #{name}:\\n    #{source}\\n    #{version_or_branch}\"\noutput.rstrip(\" \")\n"}},{"id":"version:String?-instance-method","html_id":"version:String?-instance-method","name":"version","doc":"The version of the shard.\nEither `#version` or `#branch` may be optionally provided, but not both.\n\nExample:\n```\n~> 1.0.3\n```","summary":"<p>The version of the shard.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/spark/shard/shard_content.cr","line_number":30,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L30"},"def":{"name":"version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@version"}},{"id":"version_or_branch-instance-method","html_id":"version_or_branch-instance-method","name":"version_or_branch","doc":"Intelligently determine whether to use the branch or a version string for the shard.\n\nOutputs a `shard.yml`-friendly variant of the version or branch, which is always suffixed\nwith a newline since it is the last line in a shard definition. This allows for a simpler `#to_s` implementation.\n\nExample:\n```\nSpark::Shard::ShardContent.new(name: \"test\", github: \"stephendolan/spark\", version: \"~> 1.0.3\").version_or_branch # => \"version: ~> 1.0.3\\n\"\nSpark::Shard::ShardContent.new(name: \"test\", github: \"stephendolan/spark\", branch: \"main\").version_or_branch      # => \"branch: main\\n\"\n```","summary":"<p>Intelligently determine whether to use the branch or a version string for the shard.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/spark/shard/shard_content.cr","line_number":80,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_content.cr#L80"},"def":{"name":"version_or_branch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if version && branch\n  raise(ArgumentError.new(\"Cannot provide both `version` and `branch` for shard content.\"))\nend\nif version\n  \"version: #{version}\\n\"\nelse\n  if branch\n    \"branch: #{branch}\\n\"\n  else\n    \"\"\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"Spark/Spark/Shard/ShardFile","path":"Spark/Shard/ShardFile.html","kind":"class","full_name":"Spark::Shard::ShardFile","name":"ShardFile","abstract":false,"superclass":{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"Spark/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"Spark/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/spark/shard/shard_file.cr","line_number":3,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L3"}],"repository_name":"Spark","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"Spark/Spark/Shard","kind":"module","full_name":"Spark::Shard","name":"Shard"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(path:String)-class-method","html_id":"new(path:String)-class-method","name":"new","doc":"Creates a new `ShardFile` that parses the given path for `shard.yml` content.","summary":"<p>Creates a new <code><a href=\"../../Spark/Shard/ShardFile.html\">ShardFile</a></code> that parses the given path for <code>shard.yml</code> content.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/spark/shard/shard_file.cr","line_number":14,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L14"},"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"contains_shard?(name:String)-instance-method","html_id":"contains_shard?(name:String)-instance-method","name":"contains_shard?","doc":"Determine whether or not the `ShardFile` already has an entry for the given shard.\n\nExample:\n```yaml\n  name: test_shard_yml\n\n  version: x.x.x\n\n  dependencies:\n    spark:\n      github: stephendolan/spark\n```\n\n```\nSpark::Shard::ShardFile.new(\"shard.yml\").contains_shard?(\"spark\") # => true\nSpark::Shard::ShardFile.new(\"shard.yml\").contains_shard?(\"lucky\") # => false\n```","summary":"<p>Determine whether or not the <code><a href=\"../../Spark/Shard/ShardFile.html\">ShardFile</a></code> already has an entry for the given shard.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/spark/shard/shard_file.cr","line_number":39,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L39"},"def":{"name":"contains_shard?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(/\\b#{name}:\\s*\\n/).matches?(content)"}},{"id":"content:String-instance-method","html_id":"content:String-instance-method","name":"content","doc":"The content of the shard file in its entirety.","summary":"<p>The content of the shard file in its entirety.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/spark/shard/shard_file.cr","line_number":5,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L5"},"def":{"name":"content","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@content"}},{"id":"has_development_dependencies_section?:Bool-instance-method","html_id":"has_development_dependencies_section?:Bool-instance-method","name":"has_development_dependencies_section?","doc":"Whether or not the `development_dependencies:` header exists in the shard file.","summary":"<p>Whether or not the <code>development_dependencies:</code> header exists in the shard file.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/spark/shard/shard_file.cr","line_number":8,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L8"},"def":{"name":"has_development_dependencies_section?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@has_development_dependencies_section"}},{"id":"has_production_dependencies_section?:Bool-instance-method","html_id":"has_production_dependencies_section?:Bool-instance-method","name":"has_production_dependencies_section?","doc":"Whether or not the `dependencies:` header exists in the shard file.","summary":"<p>Whether or not the <code>dependencies:</code> header exists in the shard file.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/spark/shard/shard_file.cr","line_number":11,"url":"https://github.com/stephendolan/spark/blob/v1.11.1/src/spark/shard/shard_file.cr#L11"},"def":{"name":"has_production_dependencies_section?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@has_production_dependencies_section"}}],"macros":[],"types":[]}]}]}]}})